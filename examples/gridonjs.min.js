/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var ADUtils = __webpack_require__(1).Utils;
	var GRIDONJS_ELEMENT_CLASS = __webpack_require__(1).GRIDONJS_ELEMENT_CLASS;
	var GRIDONJS_CONTAINER_CLASS = __webpack_require__(1).GRIDONJS_CONTAINER_CLASS;
	var Grid = __webpack_require__(4).Grid;
	var GridElement = __webpack_require__(2).GridElement;

	var GridOnJs = function () {
	  function GridOnJs() {
	    _classCallCheck(this, GridOnJs);
	  }

	  _createClass(GridOnJs, null, [{
	    key: "get",
	    value: function get(id) {
	      return this.gridsMap.get(id);
	    }
	  }, {
	    key: "autodiscover",
	    value: function autodiscover() {
	      ADUtils.autodiscover();
	    }
	  }, {
	    key: "gridsMap",
	    get: function get() {
	      return Grid.gridsMap;
	    }
	  }]);

	  return GridOnJs;
	}();

	window.GridOnJs = GridOnJs;

	module.exports = { GridOnJs: GridOnJs };

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var GridElement = __webpack_require__(2).GridElement;
	var Grid = __webpack_require__(4).Grid;

	var GRIDONJS_PREFIX = "gojs";
	var GRIDONJS_CONTAINER_CLASS = GRIDONJS_PREFIX + "-c";
	var GRIDONJS_ELEMENT_CLASS = GRIDONJS_PREFIX + "-e";

	var Utils = function () {
	  function Utils() {
	    _classCallCheck(this, Utils);
	  }

	  _createClass(Utils, null, [{
	    key: "setGridOnJsElements",
	    value: function setGridOnJsElements(domList, ClassObject, map) {
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = domList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var element = _step.value;

	          map.set(element.id, new ClassObject(element));
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }
	    }
	  }, {
	    key: "findGridContainersDomAtRoot",
	    value: function findGridContainersDomAtRoot(domElement) {
	      return domElement.getElementsByClassName(GRIDONJS_CONTAINER_CLASS);
	    }
	  }, {
	    key: "findGridElementsDomAtRoot",
	    value: function findGridElementsDomAtRoot(domElement) {
	      var result = new Array();
	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = domElement.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var element = _step2.value;

	          if (element.classList.contains(GRIDONJS_ELEMENT_CLASS)) {
	            result.push(element);
	          }
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }

	      return result;
	    }
	  }, {
	    key: "filterNewGridContainersDom",
	    value: function filterNewGridContainersDom(domElements) {

	      function predicate(domElement) {
	        var _iteratorNormalCompletion3 = true;
	        var _didIteratorError3 = false;
	        var _iteratorError3 = undefined;

	        try {
	          for (var _iterator3 = Grid.gridsMap[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	            var kv = _step3.value;

	            if (kv[1].domElement === domElement) {
	              return false;
	            }
	          }
	        } catch (err) {
	          _didIteratorError3 = true;
	          _iteratorError3 = err;
	        } finally {
	          try {
	            if (!_iteratorNormalCompletion3 && _iterator3.return) {
	              _iterator3.return();
	            }
	          } finally {
	            if (_didIteratorError3) {
	              throw _iteratorError3;
	            }
	          }
	        }

	        return true;
	      }

	      var filtered = new Array();
	      var _iteratorNormalCompletion4 = true;
	      var _didIteratorError4 = false;
	      var _iteratorError4 = undefined;

	      try {
	        for (var _iterator4 = domElements[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	          var element = _step4.value;

	          if (predicate(element)) {
	            filtered.push(element);
	          }
	        }
	      } catch (err) {
	        _didIteratorError4 = true;
	        _iteratorError4 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion4 && _iterator4.return) {
	            _iterator4.return();
	          }
	        } finally {
	          if (_didIteratorError4) {
	            throw _iteratorError4;
	          }
	        }
	      }

	      return filtered;
	    }
	  }, {
	    key: "addGridElementsDomToGrid",
	    value: function addGridElementsDomToGrid(grid, domElements) {
	      var _iteratorNormalCompletion5 = true;
	      var _didIteratorError5 = false;
	      var _iteratorError5 = undefined;

	      try {
	        for (var _iterator5 = domElements[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
	          var domElement = _step5.value;

	          var idInGrid = grid.getIdOfDomElement(domElement);
	          if (idInGrid === undefined) {
	            //just sets new Element
	            grid.set(domElement.id, new GridElement(domElement));
	          } else {
	            if (idInGrid != domElement.id) {
	              //removes from old key-value and set to new key value
	              var gridElement = grid.delete(idInGrid);
	              grid.set(domElement.id, gridElement);
	            }
	          }
	        }
	      } catch (err) {
	        _didIteratorError5 = true;
	        _iteratorError5 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion5 && _iterator5.return) {
	            _iterator5.return();
	          }
	        } finally {
	          if (_didIteratorError5) {
	            throw _iteratorError5;
	          }
	        }
	      }
	    }
	  }, {
	    key: "autodiscover",
	    value: function autodiscover() {
	      var gridDomElements = Utils.findGridContainersDomAtRoot(document);
	      gridDomElements = Utils.filterNewGridContainersDom(gridDomElements);
	      Utils.setGridOnJsElements(gridDomElements, Grid, Grid.gridsMap);
	      var grid = null;
	      var gridElementsDom = null;
	      var _iteratorNormalCompletion6 = true;
	      var _didIteratorError6 = false;
	      var _iteratorError6 = undefined;

	      try {
	        for (var _iterator6 = Grid.gridsMap[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
	          var kv = _step6.value;

	          grid = kv[1];
	          gridElementsDom = Utils.findGridElementsDomAtRoot(grid.domElement);
	          Utils.addGridElementsDomToGrid(grid, gridElementsDom);
	        }
	      } catch (err) {
	        _didIteratorError6 = true;
	        _iteratorError6 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion6 && _iterator6.return) {
	            _iterator6.return();
	          }
	        } finally {
	          if (_didIteratorError6) {
	            throw _iteratorError6;
	          }
	        }
	      }
	    }
	  }]);

	  return Utils;
	}();

	module.exports = { Utils: Utils, GRIDONJS_ELEMENT_CLASS: GRIDONJS_ELEMENT_CLASS, GRIDONJS_CONTAINER_CLASS: GRIDONJS_CONTAINER_CLASS };

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PercentStyleController = __webpack_require__(3).PercentStyleController;
	var Rectangle = __webpack_require__(3).Rectangle;

	var RECT = Symbol("RECT");
	var GRID_LAYOUT = Symbol("GRID_LAYOUT");
	var PSC = Symbol("PSC");
	var DOM_ELEMENT = Symbol("DOM_ELEMENT");

	var GridElement = function () {
	  _createClass(GridElement, null, [{
	    key: "checkGridLayoutObject",
	    value: function checkGridLayoutObject(gridLayoutObject) {
	      if (gridLayoutObject === undefined) {
	        return;
	      }
	      var props = ["rows", "cols"];
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = props[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var prop = _step.value;

	          if (gridLayoutObject[prop] === undefined) {
	            throw "Grid layout should contain property:" + prop;
	          }
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }
	    }
	  }]);

	  function GridElement(domElement) {
	    _classCallCheck(this, GridElement);

	    this[PSC] = new PercentStyleController(domElement);
	    this[RECT] = new Rectangle();
	    this[DOM_ELEMENT] = domElement;
	  }

	  _createClass(GridElement, [{
	    key: "transform",
	    value: function transform(left, top, width, height) {
	      this.left = left;
	      this.top = top;
	      this.width = width;
	      this.height = height;
	    }
	  }, {
	    key: "transformByList",
	    value: function transformByList(list) {
	      this.transform(list[0], list[1], list[2], list[3]);
	    }
	  }, {
	    key: "transformByObject",
	    value: function transformByObject(object) {
	      this.transform(object.left, object.top, object.width, object.height);
	    }
	  }, {
	    key: "recalulatePixelsAsGridElement",
	    value: function recalulatePixelsAsGridElement() {
	      this.left = this.left;
	      this.top = this.top;
	      this.width = this.width;
	      this.height = this.height;
	    }
	  }, {
	    key: "toString",
	    value: function toString() {
	      return this[RECT].toString();
	    }
	  }, {
	    key: "domElement",
	    get: function get() {
	      return this[DOM_ELEMENT];
	    }
	  }, {
	    key: "id",
	    get: function get() {
	      return this[DOM_ELEMENT].id;
	    }
	  }, {
	    key: "layout",
	    set: function set(gridLayout) {
	      GridElement.checkGridLayoutObject(gridLayout);
	      this[GRID_LAYOUT] = gridLayout;
	    },
	    get: function get() {
	      return this[GRID_LAYOUT];
	    }
	  }, {
	    key: "psc",
	    get: function get() {
	      return this[PSC];
	    }
	  }, {
	    key: "rowPercents",
	    get: function get() {
	      return 100 / this.layout.rows;
	    }
	  }, {
	    key: "colPercents",
	    get: function get() {
	      return 100 / this.layout.cols;
	    }
	  }, {
	    key: "width",
	    set: function set(width) {
	      this[RECT].width = width;
	      this.psc.width = this.colPercents * width;
	    },
	    get: function get() {
	      return this[RECT].width;
	    }
	  }, {
	    key: "height",
	    set: function set(height) {
	      this[RECT].height = height;
	      this.psc.height = this.rowPercents * height;
	    },
	    get: function get() {
	      return this[RECT].height;
	    }
	  }, {
	    key: "top",
	    set: function set(top) {
	      this[RECT].top = top;
	      this.psc.top = this.rowPercents * top;
	    },
	    get: function get() {
	      return this[RECT].top;
	    }
	  }, {
	    key: "left",
	    set: function set(left) {
	      this[RECT].left = left;
	      this.psc.left = this.colPercents * left;
	    },
	    get: function get() {
	      return this[RECT].left;
	    }
	  }]);

	  return GridElement;
	}();

	module.exports = { GridElement: GridElement };

/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var LEFT = Symbol("LEFT");
	var TOP = Symbol("TOP");
	var WIDTH = Symbol("WIDTH");
	var HEIGHT = Symbol("HEIGT");
	var RECTANGLE = Symbol("RECTANGLE");
	var PPSC = Symbol("PPSC"); // parent pixel style controller
	var PSC = Symbol("PSC"); // pixel style conroller
	var CENTER_PIVOT_VERTICAL = Symbol("CENTER_PIVOT_VERTICAL");
	var CENTER_PIVOT_HORIZONTAL = Symbol("CENTER_PIVOT_HORIZONTAL");

	var Rectangle = function () {
	  _createClass(Rectangle, null, [{
	    key: "checkIsNan",
	    value: function checkIsNan(name, value) {
	      if (Number.isNaN(value)) {
	        throw name + " should be a number. Current is NaN";
	      }
	    }
	  }, {
	    key: "checkSizeValue",
	    value: function checkSizeValue(name, value) {
	      if (value < 0) {
	        throw name + " should be positive or zero. Current is " + value;
	      }
	    }
	  }]);

	  function Rectangle() {
	    var left = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
	    var top = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
	    var width = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
	    var height = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];

	    _classCallCheck(this, Rectangle);

	    this.left = left;
	    this.top = top;
	    this.width = width;
	    this.height = height;
	  }

	  _createClass(Rectangle, [{
	    key: "getWidthInHeight",
	    value: function getWidthInHeight() {
	      return this.height / this.width;
	    }
	  }, {
	    key: "getHeightInWidth",
	    value: function getHeightInWidth() {
	      return this.width / this.height;
	    }
	  }, {
	    key: "setLocation",
	    value: function setLocation(left, top) {
	      this.top = top;
	      this.left = left;
	    }
	  }, {
	    key: "setSize",
	    value: function setSize(width, height) {
	      this.width = width;
	      this.height = height;
	    }
	  }, {
	    key: "move",
	    value: function move(x, y) {
	      Rectangle.checkIsNan("x", x);
	      Rectangle.checkIsNan("y", y);
	      this.top += y;
	      this.left += x;
	    }
	  }, {
	    key: "toString",
	    value: function toString() {
	      return "LT:(" + this.left + "," + this.top + ") WH:(" + this.width + "," + this.height + ")";
	    }
	  }, {
	    key: "update",
	    value: function update(rect) {
	      this.width = rect.width;
	      this.height = rect.height;
	      this.left = rect.left;
	      this.top = rect.top;
	    }
	  }, {
	    key: "left",
	    get: function get() {
	      return this[LEFT];
	    },
	    set: function set(value) {
	      Rectangle.checkIsNan('left', value);
	      this[LEFT] = value;
	    }
	  }, {
	    key: "top",
	    get: function get() {
	      return this[TOP];
	    },
	    set: function set(value) {
	      Rectangle.checkIsNan('top', value);
	      this[TOP] = value;
	    }
	  }, {
	    key: "height",
	    get: function get() {
	      return this[HEIGHT];
	    },
	    set: function set(value) {
	      Rectangle.checkIsNan('height', value);
	      Rectangle.checkSizeValue('height', value);
	      this[HEIGHT] = value;
	    }
	  }, {
	    key: "width",
	    get: function get() {
	      return this[WIDTH];
	    },
	    set: function set(value) {
	      Rectangle.checkIsNan('width', value);
	      Rectangle.checkSizeValue('width', value);
	      this[WIDTH] = value;
	    }
	  }]);

	  return Rectangle;
	}();

	var PixelStyleController = function () {
	  _createClass(PixelStyleController, [{
	    key: "cssPosition",
	    set: function set(value) {
	      if (this.cssPosition != value) {
	        this.domElement.style.position = value;
	      }
	    },
	    get: function get() {
	      return this.domElement.style.position;
	    }
	  }], [{
	    key: "convertToPixels",
	    value: function convertToPixels(value) {
	      return value + "px";
	    }
	  }, {
	    key: "convertFromPixels",
	    value: function convertFromPixels(value) {
	      if (value.length == 0) {
	        return 0;
	      } else if (value.endsWith("px")) {
	        return Number.parseFloat(value.substring(0, value.length - 2));
	      } else if (value === undefined) {
	        return 0;
	      } else {
	        return Number.parseFloat(value);
	      }
	    }
	  }]);

	  function PixelStyleController(domElement) {
	    _classCallCheck(this, PixelStyleController);

	    this.domElement = domElement;
	    this[RECTANGLE] = new Rectangle(this.left, this.top, this.width, this.height);
	  }

	  _createClass(PixelStyleController, [{
	    key: "setLocation",
	    value: function setLocation(left, top) {
	      this[RECTANGLE].setLocation(left, top);
	      this.left = left;
	      this.top = top;
	      return this;
	    }
	  }, {
	    key: "setSize",
	    value: function setSize(width, height) {
	      this[RECTANGLE].setSize(width, height);
	      this.width = width;
	      this.height = height;
	      return this;
	    }
	  }, {
	    key: "move",
	    value: function move(x, y) {
	      this[RECTANGLE].move(x, y);
	      this.left += x;
	      this.top += y;
	      return this;
	    }
	  }, {
	    key: "toString",
	    value: function toString() {
	      return "W:" + this.width + " H:" + this.height + " T:" + this.top + " L:" + this.left;
	    }
	  }, {
	    key: "getHeightInWidth",
	    value: function getHeightInWidth() {
	      this[RECTANGLE].update(this);
	      return this[RECTANGLE].getHeightInWidth();
	    }
	  }, {
	    key: "getWidthInHeight",
	    value: function getWidthInHeight() {
	      this[RECTANGLE].update(this);
	      return this[RECTANGLE].getWidthInHeight();
	    }
	  }, {
	    key: "width",
	    set: function set(value) {
	      this[RECTANGLE].width = value;
	      this.domElement.style.width = PixelStyleController.convertToPixels(value);
	      return this;
	    },
	    get: function get() {
	      return this.domElement.clientWidth;
	    }
	  }, {
	    key: "height",
	    set: function set(value) {
	      this[RECTANGLE].height = value;
	      this.domElement.style.height = PixelStyleController.convertToPixels(value);
	      return this;
	    },
	    get: function get() {
	      return this.domElement.clientHeight;
	    }
	  }, {
	    key: "top",
	    set: function set(value) {
	      this[RECTANGLE].top = value;
	      if (this.verticalPivotAtCenter) {
	        value -= this.height / 2;
	      }
	      this.domElement.style.top = PixelStyleController.convertToPixels(value);
	      return this;
	    },
	    get: function get() {
	      var value = this.domElement.style.top;
	      if (this.verticalPivotAtCenter) {
	        value -= this.height / 2;
	      }
	      return PixelStyleController.convertFromPixels(value);
	    }
	  }, {
	    key: "left",
	    set: function set(value) {
	      this[RECTANGLE].left = value;
	      if (this.horizontalPivotAtCenter) {
	        value -= this.width / 2;
	      }
	      this.domElement.style.left = PixelStyleController.convertToPixels(value);
	      return this;
	    }
	    //this changes standart pivot top left to pivot at center of the RECTANGLE(diags crossing)
	    ,
	    get: function get() {
	      var value = this.domElement.style.left;
	      if (this.horizontalPivotAtCenter) {
	        value -= this.width / 2;
	      }
	      return PixelStyleController.convertFromPixels(value);
	    }
	  }, {
	    key: "horizontalPivotAtCenter",
	    set: function set(centerPivot) {
	      if (centerPivot) {
	        this[CENTER_PIVOT_HORIZONTAL] = true;
	      } else {
	        this[CENTER_PIVOT_HORIZONTAL] = false;
	      }
	    },
	    get: function get() {
	      return this[CENTER_PIVOT_HORIZONTAL];
	    }
	  }, {
	    key: "verticalPivotAtCenter",
	    set: function set(centerPivot) {
	      if (centerPivot) {
	        this[CENTER_PIVOT_VERTICAL] = true;
	      } else {
	        this[CENTER_PIVOT_VERTICAL] = false;
	      }
	    },
	    get: function get() {
	      return this[CENTER_PIVOT_VERTICAL];
	    }
	  }, {
	    key: "pivotAtCenter",
	    set: function set(centerPivot) {
	      this.horizontalPivotAtCenter = centerPivot;
	      this.verticalPivotAtCenter = centerPivot;
	    },
	    get: function get() {
	      return this.horizontalPivotAtCenter || this.verticalPivotAtCenter;
	    }
	  }, {
	    key: "parent",
	    get: function get() {
	      return this.domElement.parentElement;
	    }
	  }]);

	  return PixelStyleController;
	}();

	var PercentStyleController = function () {
	  function PercentStyleController(domElement) {
	    var recalculatePercents = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
	    var resetCss = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

	    _classCallCheck(this, PercentStyleController);

	    var psc = new PixelStyleController(domElement);
	    var ppsc = new PixelStyleController(domElement.parentElement);
	    var rectangle = new Rectangle();
	    this[RECTANGLE] = rectangle;
	    this[PSC] = psc;
	    this[PPSC] = ppsc;
	    if (recalculatePercents) {
	      this.recalculatePercents();
	    }
	    if (resetCss) {
	      psc.cssPosition = "absolute";
	      psc.domElement.style.margin = 0;
	      psc.domElement.style.padding = 0;
	    }
	  }

	  _createClass(PercentStyleController, [{
	    key: "setLocation",
	    value: function setLocation(left, top) {
	      this.left = left;
	      this.top = top;
	      return this;
	    }
	  }, {
	    key: "setSize",
	    value: function setSize(width, height) {
	      this.width = width;
	      this.height = height;
	      return this;
	    }
	  }, {
	    key: "setLocation",
	    value: function setLocation(left, top) {
	      this[RECTANGLE].setLocation(left, top);
	      this[PSC].setLocation(left * this.widthPercentPixels, top * this.heightPercentPixels);
	      return this;
	    }
	  }, {
	    key: "setSize",
	    value: function setSize(width, height) {
	      this[RECTANGLE].setSize(width, height);
	      this[PSC].setSize(width * this.widthPercentPixels, height * this.heightPercentPixels);
	      return this;
	    }
	  }, {
	    key: "move",
	    value: function move(x, y) {
	      this[RECTANGLE].move(x, y);
	      x = this[RECTANGLE].left;
	      y = this[RECTANGLE].top;
	      this[PSC].setLocation(x * this.widthPercentPixels, y * this.heightPercentPixels);
	      return this;
	    }
	  }, {
	    key: "setPxLocation",
	    value: function setPxLocation(left, top) {
	      this[PSC].setLocation(left, top);
	      this[RECTANGLE].setLocation(left / this.widthPercentPixels, top / this.heightPercentPixels);
	      return this;
	    }
	  }, {
	    key: "setPxSize",
	    value: function setPxSize(width, height) {
	      this[PSC].setSize(width, height);
	      this[RECTANGLE].setSize(width / this.widthPercentPixels, height / this.heightPercentPixels);
	      return this;
	    }
	  }, {
	    key: "pxMove",
	    value: function pxMove(x, y) {
	      this[PSC].move(x, y);
	      this[RECTANGLE].move(x / this.widthPercentPixels, y / this.heightPercentPixels);
	      return this;
	    }
	  }, {
	    key: "recalculatePixels",
	    value: function recalculatePixels() {
	      this.setLocation(this.left, this.top);
	      this.setSize(this.width, this.height);
	      return this;
	    }
	  }, {
	    key: "recalculatePercents",
	    value: function recalculatePercents() {
	      var rectangle = this[RECTANGLE];
	      if (this.widthPercentPixels != 0) {
	        rectangle.width = this.pxWidth / this.widthPercentPixels;
	        rectangle.left = this.pxLeft / this.widthPercentPixels;
	      }

	      if (this.heightPercentPixels != 0) {
	        rectangle.height = this.pxHeight / this.heightPercentPixels;
	        rectangle.top = this.pxTop / this.heightPercentPixels;
	      }
	    }
	  }, {
	    key: "toString",
	    value: function toString() {
	      return this[RECTANGLE].toString();
	    }
	  }, {
	    key: "cssPosition",
	    get: function get() {
	      return this[PSC].cssPosition;
	    },
	    set: function set(value) {
	      this[PSC].cssPosition = value;
	    }
	  }, {
	    key: "pivotAtCenter",
	    set: function set(centerPivot) {
	      this[PSC].pivotAtCenter = centerPivot;
	    },
	    get: function get() {
	      return this[PSC].pivotAtCenter;
	    }
	  }, {
	    key: "horizontalPivotAtCenter",
	    set: function set(centerPivot) {
	      this[PSC].horizontalPivotAtCenter = centerPivot;
	    },
	    get: function get() {
	      return this[PSC].horizontalPivotAtCenter;
	    }
	  }, {
	    key: "verticalPivotAtCenter",
	    set: function set(centerPivot) {
	      this[PSC].verticalPivotAtCenter = centerPivot;
	    },
	    get: function get() {
	      return this[PSC].verticalPivotAtCenter;
	    }
	  }, {
	    key: "width",
	    set: function set(value) {
	      this[RECTANGLE].width = value;
	      this[PSC].width = value * this.widthPercentPixels;
	      return this;
	    },
	    get: function get() {
	      return this[RECTANGLE].width;
	    }
	  }, {
	    key: "height",
	    set: function set(value) {
	      this[RECTANGLE].height = value;
	      this[PSC].height = value * this.heightPercentPixels;
	      return this;
	    },
	    get: function get() {
	      return this[RECTANGLE].height;
	    }
	  }, {
	    key: "top",
	    set: function set(value) {
	      this[RECTANGLE].top = value;
	      this[PSC].top = value * this.heightPercentPixels;
	      return this;
	    },
	    get: function get() {
	      return this[RECTANGLE].top;
	    }
	  }, {
	    key: "left",
	    set: function set(value) {
	      this[RECTANGLE].left = value;
	      this[PSC].left = value * this.widthPercentPixels;
	      return this;
	    },
	    get: function get() {
	      return this[RECTANGLE].left;
	    }
	  }, {
	    key: "heightPercentPixels",
	    get: function get() {
	      return this[PPSC].height / 100;
	    }
	  }, {
	    key: "widthPercentPixels",
	    get: function get() {
	      return this[PPSC].width / 100;
	    }
	  }, {
	    key: "pxWidth",
	    get: function get() {
	      return this[PSC].width;
	    },
	    set: function set(width) {
	      this[PSC].width = width;
	      this[RECTANGLE].width = width / this.widthPercentPixels;
	      return this;
	    }
	  }, {
	    key: "pxHeight",
	    get: function get() {
	      return this[PSC].height;
	    },
	    set: function set(height) {
	      this[PSC].height = height;
	      this[RECTANGLE].height = height / this.heightPercentPixels;
	      return this;
	    }
	  }, {
	    key: "pxTop",
	    get: function get() {
	      return this[PSC].top;
	    },
	    set: function set(top) {
	      this[PSC].top = top;
	      this[RECTANGLE].top = top / this.heightPercentPixels;
	      return this;
	    }
	  }, {
	    key: "pxLeft",
	    get: function get() {
	      return this[PSC].left;
	    },
	    set: function set(left) {
	      this[PSC].left = left;
	      this[RECTANGLE].left = left / this.widthPercentPixels;
	      return this;
	    }
	  }, {
	    key: "parentPxLeft",
	    get: function get() {
	      return this[PPSC].left;
	    }
	  }, {
	    key: "parentPxTop",
	    get: function get() {
	      return this[PPSC].top;
	    }
	  }, {
	    key: "parentPxWidth",
	    get: function get() {
	      return this[PPSC].width;
	    }
	  }, {
	    key: "parentPxHeight",
	    get: function get() {
	      return this[PPSC].height;
	    }
	  }]);

	  return PercentStyleController;
	}();

	module.exports = {
	  Rectangle: Rectangle,
	  PixelStyleController: PixelStyleController,
	  PercentStyleController: PercentStyleController
	};

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var GridElement = __webpack_require__(2).GridElement;
	var PercentStyleController = __webpack_require__(3).PercentStyleController;

	var GRID_LAYOUT = Symbol("GRID_LAYOUT");
	var ELEM_MAP = Symbol("ELEM_MAP");
	var DOM_ELEMENT = Symbol("DOM_ELEMENT");
	//const PSC = Symbol("PSC");
	var STATIC_GRIDS_MAP = Symbol("STATIC_GRIDS_MAP");

	var Grid = function () {
	  _createClass(Grid, null, [{
	    key: "gridsMap",
	    get: function get() {
	      if (Grid[STATIC_GRIDS_MAP] === undefined) {
	        Grid[STATIC_GRIDS_MAP] = new Map();
	      }
	      return Grid[STATIC_GRIDS_MAP];
	    }
	  }]);

	  function Grid(domElement) {
	    var cols = arguments.length <= 1 || arguments[1] === undefined ? 10 : arguments[1];
	    var rows = arguments.length <= 2 || arguments[2] === undefined ? 10 : arguments[2];

	    _classCallCheck(this, Grid);

	    this[GRID_LAYOUT] = { rows: rows, cols: cols };
	    this[ELEM_MAP] = new Map();
	    this[DOM_ELEMENT] = domElement;
	    //this[PSC]=new PercentStyleController(domElement,false,false);

	    Grid.gridsMap.set(domElement.id, this);
	  }

	  // get psc(){
	  //   return this[PSC];
	  // }

	  _createClass(Grid, [{
	    key: "set",
	    value: function set(id, element) {
	      element.layout = this[GRID_LAYOUT];
	      this[ELEM_MAP].set(id, element);
	    }
	  }, {
	    key: "get",
	    value: function get(id) {
	      return this[ELEM_MAP].get(id);
	    }
	  }, {
	    key: "has",
	    value: function has(id) {
	      return this.get(id) !== undefined;
	    }
	  }, {
	    key: "getIdOfDomElement",
	    value: function getIdOfDomElement(domElement) {
	      var elementsMap = this[ELEM_MAP];
	      var _iteratorNormalCompletion = true;
	      var _didIteratorError = false;
	      var _iteratorError = undefined;

	      try {
	        for (var _iterator = elementsMap[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	          var kv = _step.value;

	          if (kv[1].domElement === domElement) {
	            return kv[0];
	          }
	        }
	      } catch (err) {
	        _didIteratorError = true;
	        _iteratorError = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion && _iterator.return) {
	            _iterator.return();
	          }
	        } finally {
	          if (_didIteratorError) {
	            throw _iteratorError;
	          }
	        }
	      }

	      return undefined;
	    }
	  }, {
	    key: "delete",
	    value: function _delete(id) {
	      element = this.get(id);
	      if (element !== undefined) {
	        element.layout = undefined;
	        this[ELEM_MAP].delete(id);
	      }
	      return element;
	    }
	  }, {
	    key: "toString",
	    value: function toString() {
	      var str = "id:" + this.id + "\nrows:" + this.rows + "\ncols:" + this.cols + "\nelements:\n{";
	      var elementsMap = this[ELEM_MAP];
	      var _iteratorNormalCompletion2 = true;
	      var _didIteratorError2 = false;
	      var _iteratorError2 = undefined;

	      try {
	        for (var _iterator2 = elementsMap[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	          var _element = _step2.value;

	          str += "\nid:" + _element[0] + " => " + _element[1].toString();
	        }
	      } catch (err) {
	        _didIteratorError2 = true;
	        _iteratorError2 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion2 && _iterator2.return) {
	            _iterator2.return();
	          }
	        } finally {
	          if (_didIteratorError2) {
	            throw _iteratorError2;
	          }
	        }
	      }

	      str += "\n}";
	      return str;
	    }
	  }, {
	    key: "transformOneByParamList",
	    value: function transformOneByParamList(params) {
	      var elem = this.get(params[0]);
	      if (elem !== undefined) {
	        elem.transform(params[1], params[2], params[3], params[4]);
	      }
	    }
	  }, {
	    key: "transformManyByParamLists",
	    value: function transformManyByParamLists(list) {
	      var _iteratorNormalCompletion3 = true;
	      var _didIteratorError3 = false;
	      var _iteratorError3 = undefined;

	      try {
	        for (var _iterator3 = list[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	          var params = _step3.value;

	          this.transformOneByParamList(params);
	        }
	      } catch (err) {
	        _didIteratorError3 = true;
	        _iteratorError3 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion3 && _iterator3.return) {
	            _iterator3.return();
	          }
	        } finally {
	          if (_didIteratorError3) {
	            throw _iteratorError3;
	          }
	        }
	      }
	    }
	  }, {
	    key: "recalulatePixels",
	    value: function recalulatePixels() {
	      var elementsMap = this[ELEM_MAP];
	      var _iteratorNormalCompletion4 = true;
	      var _didIteratorError4 = false;
	      var _iteratorError4 = undefined;

	      try {
	        for (var _iterator4 = elementsMap[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
	          var kv = _step4.value;

	          kv[1].recalulatePixelsAsGridElement();
	        }
	      } catch (err) {
	        _didIteratorError4 = true;
	        _iteratorError4 = err;
	      } finally {
	        try {
	          if (!_iteratorNormalCompletion4 && _iterator4.return) {
	            _iterator4.return();
	          }
	        } finally {
	          if (_didIteratorError4) {
	            throw _iteratorError4;
	          }
	        }
	      }
	    }
	  }, {
	    key: "domElement",
	    get: function get() {
	      return this[DOM_ELEMENT];
	    }
	  }, {
	    key: "id",
	    get: function get() {
	      return this[DOM_ELEMENT].id;
	    }
	  }, {
	    key: "cols",
	    set: function set(cols) {
	      this[GRID_LAYOUT].cols = cols;
	    },
	    get: function get() {
	      return this[GRID_LAYOUT].cols;
	    }
	  }, {
	    key: "rows",
	    set: function set(rows) {
	      this[GRID_LAYOUT].rows = rows;
	    },
	    get: function get() {
	      return this[GRID_LAYOUT].rows;
	    }
	  }]);

	  return Grid;
	}();

	module.exports = { Grid: Grid };

/***/ }
/******/ ]);